// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using edk.ManagerFeatureToggles.Infra.Data;

#nullable disable

namespace edk.ManagerFeatureToggles.Infra.Migrations
{
    [DbContext(typeof(FeatureToggleDbContext))]
    partial class FeatureToggleDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.4")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("edk.ManagerFeaturesToggles.Domain.Entities.AccessSystem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AccessToken")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<int>("EnvironmentId")
                        .HasColumnType("integer");

                    b.Property<int>("EnvironmentId1")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ExpirationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("SystemId")
                        .HasColumnType("integer");

                    b.Property<int>("SystemId1")
                        .HasColumnType("integer");

                    b.Property<int>("TenantId")
                        .HasColumnType("integer");

                    b.Property<int>("TenantId1")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("EnvironmentId");

                    b.HasIndex("EnvironmentId1");

                    b.HasIndex("SystemId");

                    b.HasIndex("SystemId1");

                    b.HasIndex("TenantId");

                    b.HasIndex("TenantId1");

                    b.ToTable("AccessSystem");
                });

            modelBuilder.Entity("edk.ManagerFeaturesToggles.Domain.Entities.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Owner")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("edk.ManagerFeaturesToggles.Domain.Entities.EnvironmentBuild", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("Enable")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Enviroments");
                });

            modelBuilder.Entity("edk.ManagerFeaturesToggles.Domain.Entities.FeatureToggle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DataType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<bool>("Enable")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("SystemId")
                        .HasColumnType("integer");

                    b.Property<int>("TenantId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("SystemId");

                    b.HasIndex("TenantId");

                    b.ToTable("FeatureToggles");
                });

            modelBuilder.Entity("edk.ManagerFeaturesToggles.Domain.Entities.SystemApp", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("CustomerId")
                        .HasColumnType("integer");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("Systems");
                });

            modelBuilder.Entity("edk.ManagerFeaturesToggles.Domain.Entities.Tenant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("CustomerId")
                        .HasColumnType("integer");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("Enable")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("Tenants");
                });

            modelBuilder.Entity("edk.ManagerFeaturesToggles.Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("TenantId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UserGroupId")
                        .HasColumnType("integer");

                    b.Property<string>("UserTenantId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.HasIndex("UserGroupId");

                    b.HasIndex("UserTenantId", "TenantId")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("edk.ManagerFeaturesToggles.Domain.Entities.UserGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<List<string>>("UserTenantId")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<int?>("ValueSelectId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ValueSelectId");

                    b.ToTable("UserGroups");
                });

            modelBuilder.Entity("edk.ManagerFeaturesToggles.Domain.Entities.ValueOption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<int>("FeatureToggleId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("FeatureToggleId");

                    b.ToTable("ValueOptions");
                });

            modelBuilder.Entity("edk.ManagerFeaturesToggles.Domain.Entities.ValueSelect", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("Enable")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("FeatureToggleId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("FeatureToggleId");

                    b.ToTable("ValueSelect");
                });

            modelBuilder.Entity("edk.ManagerFeaturesToggles.Domain.Entities.AccessSystem", b =>
                {
                    b.HasOne("edk.ManagerFeaturesToggles.Domain.Entities.EnvironmentBuild", null)
                        .WithMany("AccessSystems")
                        .HasForeignKey("EnvironmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("edk.ManagerFeaturesToggles.Domain.Entities.EnvironmentBuild", "Environment")
                        .WithMany()
                        .HasForeignKey("EnvironmentId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("edk.ManagerFeaturesToggles.Domain.Entities.SystemApp", null)
                        .WithMany("AccessSystems")
                        .HasForeignKey("SystemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("edk.ManagerFeaturesToggles.Domain.Entities.SystemApp", "System")
                        .WithMany()
                        .HasForeignKey("SystemId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("edk.ManagerFeaturesToggles.Domain.Entities.Tenant", null)
                        .WithMany("AccessSystems")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("edk.ManagerFeaturesToggles.Domain.Entities.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Environment");

                    b.Navigation("System");

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("edk.ManagerFeaturesToggles.Domain.Entities.FeatureToggle", b =>
                {
                    b.HasOne("edk.ManagerFeaturesToggles.Domain.Entities.SystemApp", "System")
                        .WithMany("FeatureToggles")
                        .HasForeignKey("SystemId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("edk.ManagerFeaturesToggles.Domain.Entities.Tenant", "Tenant")
                        .WithMany("FeatureToggles")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("System");

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("edk.ManagerFeaturesToggles.Domain.Entities.SystemApp", b =>
                {
                    b.HasOne("edk.ManagerFeaturesToggles.Domain.Entities.Customer", "Customer")
                        .WithMany("Systems")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("edk.ManagerFeaturesToggles.Domain.Entities.Tenant", b =>
                {
                    b.HasOne("edk.ManagerFeaturesToggles.Domain.Entities.Customer", "Customer")
                        .WithMany("Tenants")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("edk.ManagerFeaturesToggles.Domain.Entities.User", b =>
                {
                    b.HasOne("edk.ManagerFeaturesToggles.Domain.Entities.Tenant", "Tenant")
                        .WithMany("Users")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("edk.ManagerFeaturesToggles.Domain.Entities.UserGroup", "UserGroup")
                        .WithMany()
                        .HasForeignKey("UserGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tenant");

                    b.Navigation("UserGroup");
                });

            modelBuilder.Entity("edk.ManagerFeaturesToggles.Domain.Entities.UserGroup", b =>
                {
                    b.HasOne("edk.ManagerFeaturesToggles.Domain.Entities.ValueSelect", null)
                        .WithMany("UserGroups")
                        .HasForeignKey("ValueSelectId");
                });

            modelBuilder.Entity("edk.ManagerFeaturesToggles.Domain.Entities.ValueOption", b =>
                {
                    b.HasOne("edk.ManagerFeaturesToggles.Domain.Entities.FeatureToggle", "FeatureToggle")
                        .WithMany("Values")
                        .HasForeignKey("FeatureToggleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FeatureToggle");
                });

            modelBuilder.Entity("edk.ManagerFeaturesToggles.Domain.Entities.ValueSelect", b =>
                {
                    b.HasOne("edk.ManagerFeaturesToggles.Domain.Entities.FeatureToggle", "FeatureToggle")
                        .WithMany("ValuesSelects")
                        .HasForeignKey("FeatureToggleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FeatureToggle");
                });

            modelBuilder.Entity("edk.ManagerFeaturesToggles.Domain.Entities.Customer", b =>
                {
                    b.Navigation("Systems");

                    b.Navigation("Tenants");
                });

            modelBuilder.Entity("edk.ManagerFeaturesToggles.Domain.Entities.EnvironmentBuild", b =>
                {
                    b.Navigation("AccessSystems");
                });

            modelBuilder.Entity("edk.ManagerFeaturesToggles.Domain.Entities.FeatureToggle", b =>
                {
                    b.Navigation("Values");

                    b.Navigation("ValuesSelects");
                });

            modelBuilder.Entity("edk.ManagerFeaturesToggles.Domain.Entities.SystemApp", b =>
                {
                    b.Navigation("AccessSystems");

                    b.Navigation("FeatureToggles");
                });

            modelBuilder.Entity("edk.ManagerFeaturesToggles.Domain.Entities.Tenant", b =>
                {
                    b.Navigation("AccessSystems");

                    b.Navigation("FeatureToggles");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("edk.ManagerFeaturesToggles.Domain.Entities.ValueSelect", b =>
                {
                    b.Navigation("UserGroups");
                });
#pragma warning restore 612, 618
        }
    }
}
